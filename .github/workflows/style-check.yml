name: Style Check

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: string

jobs:
  style-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch PR details
        id: pr-details
        run: |
          PR_NUMBER=${{ github.event.inputs.pr_number }}
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          
          # Get the PR details using GitHub API
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
          
          HEAD_SHA=$(echo "$PR_DATA" | jq -r .head.sha)
          HEAD_REF=$(echo "$PR_DATA" | jq -r .head.ref)
          BASE_SHA=$(echo "$PR_DATA" | jq -r .base.sha)
          
          echo "HEAD_SHA=$HEAD_SHA" >> $GITHUB_ENV
          echo "HEAD_REF=$HEAD_REF" >> $GITHUB_ENV
          echo "BASE_SHA=$BASE_SHA" >> $GITHUB_ENV
          
      - name: Get changed files and their patch data
        id: changed-files
        run: |
          # Get the list of files changed in the PR with patch data
          PR_FILES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}/files")
          
          echo "$PR_FILES" > pr_files.json
          
          # Extract just the markdown files
          MD_FILES=$(echo "$PR_FILES" | jq -r '.[] | select(.filename | endswith(".md") or endswith(".mdx")) | .filename')
          
          echo "Changed markdown files:"
          echo "$MD_FILES"
          echo "FILES<<EOF" >> $GITHUB_ENV
          echo "$MD_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Check style and create suggestions
        run: |
          # Create a directory for storing file contents
          mkdir -p temp_files
          
          # Process each changed file
          echo "$FILES" | while read -r file; do
            if [ -z "$file" ]; then
              continue
            fi
            
            echo "Processing $file"
            
            # Get file content from the PR head
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=${{ env.HEAD_REF }}" | \
              jq -r '.content' | base64 --decode > "temp_files/$(basename "$file")"
            
            # Run style check on the file
            python3 tools/enhanced_style_check.py --file "temp_files/$(basename "$file")" --output "temp_files/$(basename "$file").json"
          done
          
          # Combine all suggestions
          echo "[]" > all_suggestions.json
          for json_file in temp_files/*.json; do
            if [ -f "$json_file" ]; then
              # Merge JSON files
              jq -s '.[0] + .[1]' all_suggestions.json "$json_file" > temp.json
              mv temp.json all_suggestions.json
            fi
          done
          
          # Create review comments using a separate Python script
          cat > create_review.py << 'EOL'
          import json
          import requests
          import os
          import sys
          import re
          
          # Load PR files data to get changed lines
          with open('pr_files.json', 'r') as f:
              pr_files = json.load(f)
          
          # Create a map of changed lines by file
          changed_lines = {}
          for file_data in pr_files:
              filename = file_data['filename']
              if not (filename.endswith('.md') or filename.endswith('.mdx')):
                  continue
                  
              # Extract changed line numbers from the patch
              if 'patch' in file_data:
                  patch = file_data['patch']
                  lines = []
                  for hunk in patch.split('\n@@'):
                      if not hunk:
                          continue
                      # Extract the line numbers from the hunk header
                      match = re.search(r'\+(\d+),(\d+)', hunk)
                      if match:
                          start = int(match.group(1))
                          count = int(match.group(2))
                          lines.extend(range(start, start + count))
              else:
                  # If no patch (e.g., for new files), consider all lines changed
                  lines = range(1, 10000)  # Arbitrary large number
                  
              changed_lines[filename] = lines
          
          # Load style suggestions
          with open('all_suggestions.json', 'r') as f:
              suggestions = json.load(f)
          
          if not suggestions:
              print("No style issues found.")
              sys.exit(0)
          
          # Filter suggestions to only include those on changed lines
          filtered_suggestions = []
          for sugg in suggestions:
              file_path = sugg["file"].replace('temp_files/', '')
              line_num = sugg["line"]
              
              # Check if this line was changed in the PR
              if file_path in changed_lines and line_num in changed_lines[file_path]:
                  # Use the full path from the PR files
                  for pr_file in pr_files:
                      if pr_file['filename'].endswith(file_path):
                          sugg["file"] = pr_file['filename']
                          filtered_suggestions.append(sugg)
                          break
          
          if not filtered_suggestions:
              print("No style issues found on changed lines.")
              sys.exit(0)
          
          # Group suggestions by file
          file_suggestions = {}
          for sugg in filtered_suggestions:
              file_path = sugg["file"]
              if file_path not in file_suggestions:
                  file_suggestions[file_path] = []
              file_suggestions[file_path].append(sugg)
          
          # Create review comments
          review_comments = []
          for file_path, file_suggs in file_suggestions.items():
              for sugg in file_suggs:
                  comment = {
                      "path": file_path,
                      "line": sugg["line"],
                      "body": f"**Style suggestion**: {sugg['reason']}\n\n```suggestion\n{sugg['suggested']}\n```"
                  }
                  review_comments.append(comment)
          
          # Submit the review
          if review_comments:
              pr_number = os.environ.get('PR_NUMBER')
              repo = os.environ.get('GITHUB_REPOSITORY')
              head_sha = os.environ.get('HEAD_SHA')
              github_token = os.environ.get('GITHUB_TOKEN')
              
              url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/reviews"
              headers = {"Authorization": f"token {github_token}"}
              data = {
                  "commit_id": head_sha,
                  "body": "## Style Check Results\n\nI found some style issues that could be improved based on our writing guidelines.",
                  "event": "COMMENT",
                  "comments": review_comments
              }
              
              print(f"Submitting review with {len(review_comments)} comments")
              print(f"URL: {url}")
              print(f"First comment: {review_comments[0] if review_comments else 'None'}")
              
              response = requests.post(url, headers=headers, json=data)
              if response.status_code >= 400:
                  print(f"Error creating review: {response.status_code}")
                  print(response.text)
              else:
                  print(f"Created {len(review_comments)} style suggestions.")
          else:
              print("No style issues found.")
          EOL
          
          # Run the Python script with environment variables
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} python3 create_review.py
